{"ast":null,"code":"import _slicedToArray from\"/home/alinedebastiani/sd-08-project-recipes-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import React,{useEffect,useState}from'react';import{useDispatch,useSelector}from'react-redux';import{Redirect}from'react-router-dom';import{Card}from'react-bootstrap';import Loading from'../components/Loading';import Footer from'../components/Footer';import Header from'../components/Header';import{byAddIngredient,fetchRecipes}from'../actions/recipes';import'bootstrap/dist/css/bootstrap.min.css';import'./Explore.css';function ExploreIngredients(_ref){var pathname=_ref.location.pathname;var type=pathname.split('/')[2];var _useSelector=useSelector(function(state){return state.login;}),mealsToken=_useSelector.mealsToken,cocktailsToken=_useSelector.cocktailsToken;var _useSelector2=useSelector(function(state){return state.recipes;}),_useSelector2$list=_useSelector2.list,list=_useSelector2$list===void 0?[]:_useSelector2$list,isFetching=_useSelector2.isFetching;var dispatch=useDispatch();var _useState=useState(false),_useState2=_slicedToArray(_useState,2),shouldRedirect=_useState2[0],setShouldRedirect=_useState2[1];useEffect(function(){var reqType={request:'list',key:'i',parameter:'list'};var token=type==='comidas'?mealsToken:cocktailsToken;dispatch(fetchRecipes(token,type,reqType));},[]);var handleClick=function handleClick(ingredient){setShouldRedirect(true);dispatch(byAddIngredient(ingredient));};if(isFetching)return/*#__PURE__*/React.createElement(Loading,null);return/*#__PURE__*/React.createElement(React.Fragment,null,/*#__PURE__*/React.createElement(Header,null),/*#__PURE__*/React.createElement(\"section\",{className:\"cards-container\"},type==='comidas'?list.map(function(_ref2,index){var idIngredient=_ref2.idIngredient,strIngredient=_ref2.strIngredient;var url=\"https://www.themealdb.com/images/ingredients/\".concat(strIngredient,\"-Small.png\");return/*#__PURE__*/React.createElement(Card,{border:\"dark\",className:\"card-explore\",key:idIngredient},/*#__PURE__*/React.createElement(\"button\",{\"data-testid\":\"\".concat(index,\"-ingredient-card\"),onClick:function onClick(){return handleClick(strIngredient);},type:\"button\"},/*#__PURE__*/React.createElement(Card.Img,{alt:\"ingredient \".concat(idIngredient),className:\"ingredients-img\",\"data-testid\":\"\".concat(index,\"-card-img\"),src:url,variant:\"top\"}),/*#__PURE__*/React.createElement(Card.Body,null,/*#__PURE__*/React.createElement(Card.Title,{\"data-testid\":\"\".concat(index,\"-card-name\")},strIngredient))));}):list.map(function(_ref3,index){var strIngredient1=_ref3.strIngredient1;var url=\"https://www.thecocktaildb.com/images/ingredients/\".concat(strIngredient1,\"-Small.png\");return/*#__PURE__*/React.createElement(Card,{border:\"dark\",className:\"card-explore\",key:strIngredient1},/*#__PURE__*/React.createElement(\"button\",{\"data-testid\":\"\".concat(index,\"-ingredient-card\"),onClick:function onClick(){return handleClick(strIngredient1);},type:\"button\"},/*#__PURE__*/React.createElement(Card.Img,{alt:\"ingredient \".concat(strIngredient1),className:\"ingredients-img\",\"data-testid\":\"\".concat(index,\"-card-img\"),src:url,variant:\"top\"}),/*#__PURE__*/React.createElement(Card.Body,null,/*#__PURE__*/React.createElement(Card.Title,{\"data-testid\":\"\".concat(index,\"-card-name\")},strIngredient1))));})),shouldRedirect&&/*#__PURE__*/React.createElement(Redirect,{to:\"/\".concat(type)}),/*#__PURE__*/React.createElement(Footer,null));}export default ExploreIngredients;","map":{"version":3,"sources":["/home/alinedebastiani/sd-08-project-recipes-app/src/pages/ExploreIngredients.js"],"names":["React","useEffect","useState","useDispatch","useSelector","Redirect","Card","Loading","Footer","Header","byAddIngredient","fetchRecipes","ExploreIngredients","pathname","location","type","split","state","login","mealsToken","cocktailsToken","recipes","list","isFetching","dispatch","shouldRedirect","setShouldRedirect","reqType","request","key","parameter","token","handleClick","ingredient","map","index","idIngredient","strIngredient","url","strIngredient1"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { Redirect } from 'react-router-dom';\nimport { Card } from 'react-bootstrap';\nimport Loading from '../components/Loading';\nimport Footer from '../components/Footer';\nimport Header from '../components/Header';\nimport { byAddIngredient, fetchRecipes } from '../actions/recipes';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './Explore.css';\n\nfunction ExploreIngredients({ location: { pathname } }) {\n  const type = pathname.split('/')[2];\n  const { mealsToken, cocktailsToken } = useSelector((state) => state.login);\n  const { list = [], isFetching } = useSelector((state) => state.recipes);\n  const dispatch = useDispatch();\n  const [shouldRedirect, setShouldRedirect] = useState(false);\n\n  useEffect(() => {\n    const reqType = { request: 'list', key: 'i', parameter: 'list' };\n    const token = type === 'comidas' ? mealsToken : cocktailsToken;\n    dispatch(fetchRecipes(token, type, reqType));\n  }, []);\n\n  const handleClick = (ingredient) => {\n    setShouldRedirect(true);\n    dispatch(byAddIngredient(ingredient));\n  };\n\n  if (isFetching) return (<Loading />);\n  return (\n    <>\n      <Header />\n      <section className=\"cards-container\">\n        { type === 'comidas'\n          ? list.map(({ idIngredient, strIngredient }, index) => {\n            const url = `https://www.themealdb.com/images/ingredients/${strIngredient}-Small.png`;\n            return (\n              <Card\n                border=\"dark\"\n                className=\"card-explore\"\n                key={ idIngredient }\n              >\n                <button\n                  data-testid={ `${index}-ingredient-card` }\n                  onClick={ () => handleClick(strIngredient) }\n                  type=\"button\"\n                >\n                  <Card.Img\n                    alt={ `ingredient ${idIngredient}` }\n                    className=\"ingredients-img\"\n                    data-testid={ `${index}-card-img` }\n                    src={ url }\n                    variant=\"top\"\n                  />\n                  <Card.Body>\n                    <Card.Title\n                      data-testid={ `${index}-card-name` }\n                    >\n                      { strIngredient }\n                    </Card.Title>\n                  </Card.Body>\n                </button>\n              </Card>\n            );\n          })\n          : list.map(({ strIngredient1 }, index) => {\n            const url = `https://www.thecocktaildb.com/images/ingredients/${strIngredient1}-Small.png`;\n            return (\n              <Card\n                border=\"dark\"\n                className=\"card-explore\"\n                key={ strIngredient1 }\n              >\n                <button\n                  data-testid={ `${index}-ingredient-card` }\n                  onClick={ () => handleClick(strIngredient1) }\n                  type=\"button\"\n                >\n                  <Card.Img\n                    alt={ `ingredient ${strIngredient1}` }\n                    className=\"ingredients-img\"\n                    data-testid={ `${index}-card-img` }\n                    src={ url }\n                    variant=\"top\"\n                  />\n                  <Card.Body>\n                    <Card.Title\n                      data-testid={ `${index}-card-name` }\n                    >\n                      { strIngredient1 }\n                    </Card.Title>\n                  </Card.Body>\n                </button>\n              </Card>\n            );\n          }) }\n      </section>\n      { shouldRedirect && <Redirect to={ `/${type}` } /> }\n      <Footer />\n    </>\n  );\n}\n\nExploreIngredients.propTypes = {\n  location: PropTypes.shape({\n    pathname: PropTypes.string.isRequired,\n  }).isRequired,\n};\n\nexport default ExploreIngredients;\n"]},"metadata":{},"sourceType":"module"}