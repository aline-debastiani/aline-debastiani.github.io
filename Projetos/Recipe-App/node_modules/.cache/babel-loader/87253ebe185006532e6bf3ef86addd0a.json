{"ast":null,"code":"var _jsxFileName = \"/home/alinedebastiani/sd-08-project-recipes-app/src/pages/RecipeDetails.jsx\";\nimport React, { useEffect, useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { fetchRecipes, fetchRecommendations } from '../actions/recipes';\nimport Loading from '../components/Loading';\nimport RecipeCard from '../components/RecipeCard';\nimport IngredientsList from '../components/IngredientsList';\nimport ProgressButton from '../components/ProgressButton';\nimport FavButton from '../components/FavButton';\nimport ShareIcon from \"../images/shareIcon.svg\";\nimport './RecipeDetails.css';\n\nfunction RecipeDetails({\n  match: {\n    params\n  },\n  location: {\n    pathname\n  }\n}) {\n  const {\n    list,\n    isFetching,\n    recommendations\n  } = useSelector(state => state.recipes);\n  const dispatch = useDispatch();\n  const [shouldFetch, setShouldFetch] = useState(true);\n  const selectType = {\n    comidas: 'meals',\n    bebidas: 'drinks'\n  };\n  const inProgress = pathname.split('/')[3] === 'in-progress';\n  const type = selectType[pathname.split('/')[1]];\n  const recommendationsType = type === 'meals' ? 'drinks' : 'meals';\n  const token = 1;\n  useEffect(() => {\n    dispatch(fetchRecipes(token, type, {\n      request: 'lookup',\n      key: 'i',\n      parameter: params.id\n    }));\n    dispatch(fetchRecommendations(token, recommendationsType));\n    setShouldFetch(false);\n  }, [params]);\n  if (isFetching || shouldFetch) return /*#__PURE__*/React.createElement(Loading, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 41\n    }\n  });\n  const recipe = list[0];\n  const IngredientKeys = Object.keys(recipe).filter(ingKey => ingKey.startsWith('strIngredient') && recipe[ingKey] !== '' && recipe[ingKey] !== null);\n  const IngredientsAndMeasures = IngredientKeys.map((key, index) => [recipe[key], recipe[`strMeasure${index + 1}`]]);\n  const formatedType = type[0].toUpperCase() + type.slice(1, 0 - 1);\n  return /*#__PURE__*/React.createElement(\"section\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"img\", {\n    className: \"recipe-photo\",\n    \"data-testid\": \"recipe-photo\",\n    src: recipe[`str${formatedType}Thumb`],\n    alt: recipe[`str${formatedType}`],\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(\"h1\", {\n    \"data-testid\": \"recipe-title\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 7\n    }\n  }, recipe[`str${formatedType}`]), /*#__PURE__*/React.createElement(\"button\", {\n    type: \"button\",\n    \"data-testid\": \"share-btn\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"img\", {\n    src: ShareIcon,\n    alt: \"share\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 9\n    }\n  })), /*#__PURE__*/React.createElement(FavButton, {\n    type: formatedType,\n    recipe: recipe,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(\"h2\", {\n    \"data-testid\": \"recipe-category\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 7\n    }\n  }, `${recipe.strAlcoholic || ''} ${recipe.strCategory}`), /*#__PURE__*/React.createElement(IngredientsList, {\n    id: params.id,\n    type: formatedType,\n    ingredients: IngredientsAndMeasures,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(\"p\", {\n    \"data-testid\": \"instructions\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 7\n    }\n  }, recipe.strInstructions), recipe.strYoutube && /*#__PURE__*/React.createElement(\"iframe\", {\n    src: recipe.strYoutube.split('watch?v=').join('embed/'),\n    title: \"Video\",\n    \"data-testid\": \"video\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 12\n    }\n  }), !inProgress && /*#__PURE__*/React.createElement(\"div\", {\n    className: \"recommendations\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 9\n    }\n  }, recommendations.map((recommendation, index) => /*#__PURE__*/React.createElement(\"div\", {\n    \"data-testid\": `${index}-recomendation-card`,\n    key: `rec-${index}`,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(RecipeCard, {\n    index: index,\n    type: recommendationsType === 'meals' ? 'Meal' : 'Drink',\n    recipe: recommendation,\n    recommendation: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 15\n    }\n  })))), /*#__PURE__*/React.createElement(ProgressButton, {\n    id: params.id,\n    type: formatedType,\n    ingredientsLength: IngredientsAndMeasures.length,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 7\n    }\n  }));\n}\n\nRecipeDetails.propTypes = {\n  match: PropTypes.shape({\n    params: PropTypes.shape({\n      id: PropTypes.string.isRequired\n    }).isRequired\n  }).isRequired,\n  location: PropTypes.shape({\n    pathname: PropTypes.string.isRequired\n  }).isRequired\n};\nexport default RecipeDetails;","map":{"version":3,"sources":["/home/alinedebastiani/sd-08-project-recipes-app/src/pages/RecipeDetails.jsx"],"names":["React","useEffect","useState","PropTypes","useDispatch","useSelector","fetchRecipes","fetchRecommendations","Loading","RecipeCard","IngredientsList","ProgressButton","FavButton","RecipeDetails","match","params","location","pathname","list","isFetching","recommendations","state","recipes","dispatch","shouldFetch","setShouldFetch","selectType","comidas","bebidas","inProgress","split","type","recommendationsType","token","request","key","parameter","id","recipe","IngredientKeys","Object","keys","filter","ingKey","startsWith","IngredientsAndMeasures","map","index","formatedType","toUpperCase","slice","ShareIcon","strAlcoholic","strCategory","strInstructions","strYoutube","join","recommendation","length","propTypes","shape","string","isRequired"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { fetchRecipes, fetchRecommendations } from '../actions/recipes';\n\nimport Loading from '../components/Loading';\nimport RecipeCard from '../components/RecipeCard';\nimport IngredientsList from '../components/IngredientsList';\nimport ProgressButton from '../components/ProgressButton';\nimport FavButton from '../components/FavButton';\nimport ShareIcon from '../images/shareIcon.svg';\n\nimport './RecipeDetails.css';\n\nfunction RecipeDetails({ match: { params }, location: { pathname } }) {\n  const { list, isFetching, recommendations } = useSelector((state) => state.recipes);\n  const dispatch = useDispatch();\n\n  const [shouldFetch, setShouldFetch] = useState(true);\n\n  const selectType = { comidas: 'meals', bebidas: 'drinks' };\n  const inProgress = pathname.split('/')[3] === 'in-progress';\n  const type = selectType[pathname.split('/')[1]];\n  const recommendationsType = type === 'meals' ? 'drinks' : 'meals';\n\n  const token = 1;\n\n  useEffect(() => {\n    dispatch(fetchRecipes(token, type,\n      { request: 'lookup', key: 'i', parameter: params.id }));\n    dispatch(fetchRecommendations(token, recommendationsType));\n    setShouldFetch(false);\n  }, [params]);\n\n  if (isFetching || shouldFetch) return <Loading />;\n\n  const recipe = list[0];\n  const IngredientKeys = Object.keys(recipe)\n    .filter((ingKey) => (\n      ingKey\n        .startsWith('strIngredient')\n        && recipe[ingKey] !== '' && recipe[ingKey] !== null));\n  const IngredientsAndMeasures = IngredientKeys\n    .map((key, index) => [recipe[key], recipe[`strMeasure${index + 1}`]]);\n  const formatedType = type[0].toUpperCase() + type.slice(1, 0 - 1);\n\n  return (\n    <section>\n      <img\n        className=\"recipe-photo\"\n        data-testid=\"recipe-photo\"\n        src={ recipe[`str${formatedType}Thumb`] }\n        alt={ recipe[`str${formatedType}`] }\n      />\n      <h1 data-testid=\"recipe-title\">{ recipe[`str${formatedType}`] }</h1>\n      <button type=\"button\" data-testid=\"share-btn\">\n        <img src={ ShareIcon } alt=\"share\" />\n      </button>\n      <FavButton type={ formatedType } recipe={ recipe } />\n      <h2 data-testid=\"recipe-category\">\n        { `${recipe.strAlcoholic || ''} ${recipe.strCategory}` }\n      </h2>\n      <IngredientsList\n        id={ params.id }\n        type={ formatedType }\n        ingredients={ IngredientsAndMeasures }\n      />\n      <p data-testid=\"instructions\">{ recipe.strInstructions }</p>\n      { recipe.strYoutube\n        && <iframe\n          src={ recipe.strYoutube.split('watch?v=').join('embed/') }\n          title=\"Video\"\n          data-testid=\"video\"\n        /> }\n      { !inProgress && (\n        <div className=\"recommendations\">\n          { recommendations.map((recommendation, index) => (\n            <div data-testid={ `${index}-recomendation-card` } key={ `rec-${index}` }>\n              <RecipeCard\n                index={ index }\n                type={ recommendationsType === 'meals' ? 'Meal' : 'Drink' }\n                recipe={ recommendation }\n                recommendation\n              />\n            </div>)) }\n        </div>)}\n      <ProgressButton\n        id={ params.id }\n        type={ formatedType }\n        ingredientsLength={ IngredientsAndMeasures.length }\n      />\n    </section>\n  );\n}\n\nRecipeDetails.propTypes = {\n  match: PropTypes.shape({\n    params: PropTypes.shape({\n      id: PropTypes.string.isRequired,\n    }).isRequired,\n  }).isRequired,\n  location: PropTypes.shape({\n    pathname: PropTypes.string.isRequired,\n  }).isRequired,\n};\n\nexport default RecipeDetails;\n"]},"metadata":{},"sourceType":"module"}