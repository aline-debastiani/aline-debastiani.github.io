{"ast":null,"code":"import { ADD_CATEGORIES, ADD_FAVORITE, ADD_FILTER, ADD_RECIPES, ADD_RECOMMENDATIONS, END_RECIPE, REQUEST_RECIPES, RM_FAVORITE, START_RECIPE, ADD_BYINGREDIENT } from './index';\n\nconst addRecipes = payload => ({\n  type: ADD_RECIPES,\n  payload\n});\n\nconst requestRecipes = () => ({\n  type: REQUEST_RECIPES\n});\n\nconst addFilter = payload => ({\n  type: ADD_FILTER,\n  payload\n});\n\nconst formatedObject = (obj, type) => {\n  const apiType = type === 'comidas' ? 'Meal' : 'Drink';\n  const {\n    strArea: area = '',\n    strCategory: category = '',\n    strAlcoholic: alcoholicOrNot = '',\n    [`str${apiType}`]: name,\n    [`str${apiType}Thumb`]: image,\n    strTags\n  } = obj;\n  const tags = !strTags ? [] : strTags.split(',');\n  const idApi = `id${apiType}`;\n  const id = obj[idApi];\n  const searchObject = {\n    id,\n    area,\n    category,\n    alcoholicOrNot,\n    name,\n    image,\n    type,\n    tags\n  }; // if (key === 'i') {\n  //   const IngredientKeys = Object.keys(obj)\n  //     .filter((ingKey) => (\n  //       ingKey\n  //         .startsWith('strIngredient')\n  //     && obj[ingKey] !== '' && obj[ingKey] !== null));\n  //   const measureKeys = IngredientKeys\n  //     .map((_, index) => obj[`strMeasure${index + 1}`]);\n  //   const ingredients = IngredientKeys\n  //     .reduce((acc, curr) => ({ ...acc, [curr]: obj[curr] }), {});\n  //   const measures = measureKeys\n  //     .reduce((acc, curr) => ({ ...acc, [curr]: obj[curr] }), {});\n  //   return { ...searchObject, ...ingredients, ...measures };\n  // }\n\n  return { ...obj,\n    ...searchObject\n  };\n};\n\nexport const fetchRecipes = (token, type = 'comidas', {\n  request = 'search',\n  key = 's',\n  parameter = ''\n} = {}) => async dispatch => {\n  const filter = request === 'filter' ? parameter : '';\n  dispatch(addFilter(filter));\n  dispatch(requestRecipes());\n  const typeApi = type === 'comidas' ? 'meals' : 'drinks';\n  const domains = {\n    comidas: 'themealdb',\n    bebidas: 'thecocktaildb'\n  };\n  let url = `https://www.${domains[type]}.com/api/json/v1/${token}/${request}.php?${key}=${parameter}`;\n  if (!key) url = `https://www.${domains[type]}.com/api/json/v1/${token}/${request}.php`;\n  const data = await fetch(url);\n  const {\n    [typeApi]: recipes\n  } = await data.json();\n  dispatch(addRecipes(recipes.map(recipe => formatedObject(recipe, type))));\n}; // if (url === 'https://www.themealdb.com/api/json/v1/1/list.php?i=list')\n// return Promise.resolve(mealIngredients);\n// if (url === 'https://www.themealdb.com/api/json/v1/1/filter.php?i=Chicken')\n// return Promise.resolve(mealsByIngredient);\n// if (url === 'https://www.thecocktaildb.com/api/json/v1/1/list.php?i=list')\n// return Promise.resolve(drinkIngredients);\n// if (url === 'https://www.thecocktaildb.com/api/json/v1/1/filter.php?i=Light rum')\n// return Promise.resolve(drinksByIngredient);\n\nconst addCategories = payload => ({\n  type: ADD_CATEGORIES,\n  payload\n});\n\nexport const fetchCategories = (token, type = 'comidas') => async dispatch => {\n  const urlOpt = {\n    comidas: `https://www.themealdb.com/api/json/v1/${token}/list.php?c=list`,\n    bebidas: `https://www.thecocktaildb.com/api/json/v1/${token}/list.php?c=list`\n  };\n  const data = await fetch(urlOpt[type]);\n  const typeApi = type === 'comidas' ? 'meals' : 'drinks';\n  const {\n    [typeApi]: categories\n  } = await data.json();\n  const CATEGORIES_NUMBER = 5;\n  const categoriesArray = categories.slice(0, CATEGORIES_NUMBER).map(({\n    strCategory\n  }) => strCategory);\n  dispatch(addCategories(categoriesArray));\n};\n\nconst addRecommendations = payload => ({\n  type: ADD_RECOMMENDATIONS,\n  payload\n});\n\nexport const fetchRecommendations = (token, type = 'comidas') => async dispatch => {\n  const domains = {\n    comidas: 'themealdb',\n    bebidas: 'thecocktaildb'\n  };\n  const url = `https://www.${domains[type]}.com/api/json/v1/${token}/search.php?s=`;\n  const data = await fetch(url);\n  const typeApi = type === 'comidas' ? 'meals' : 'drinks';\n  const {\n    [typeApi]: recipes\n  } = await data.json();\n  dispatch(addRecommendations(recipes.map(recipe => formatedObject(recipe, type))));\n};\nexport const startRecipe = (selectedType, payload) => ({\n  selectedType,\n  type: START_RECIPE,\n  payload\n});\nexport const endRecipe = payload => ({\n  type: END_RECIPE,\n  payload\n});\nexport const addFavorite = payload => ({\n  type: ADD_FAVORITE,\n  payload\n});\nexport const removeFavorite = payload => ({\n  type: RM_FAVORITE,\n  payload\n});\nexport const byAddIngredient = payload => ({\n  type: ADD_BYINGREDIENT,\n  payload\n});","map":{"version":3,"sources":["/home/alinedebastiani/sd-08-project-recipes-app/src/actions/recipes.js"],"names":["ADD_CATEGORIES","ADD_FAVORITE","ADD_FILTER","ADD_RECIPES","ADD_RECOMMENDATIONS","END_RECIPE","REQUEST_RECIPES","RM_FAVORITE","START_RECIPE","ADD_BYINGREDIENT","addRecipes","payload","type","requestRecipes","addFilter","formatedObject","obj","apiType","strArea","area","strCategory","category","strAlcoholic","alcoholicOrNot","name","image","strTags","tags","split","idApi","id","searchObject","fetchRecipes","token","request","key","parameter","dispatch","filter","typeApi","domains","comidas","bebidas","url","data","fetch","recipes","json","map","recipe","addCategories","fetchCategories","urlOpt","categories","CATEGORIES_NUMBER","categoriesArray","slice","addRecommendations","fetchRecommendations","startRecipe","selectedType","endRecipe","addFavorite","removeFavorite","byAddIngredient"],"mappings":"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","sourcesContent":["import { ADD_CATEGORIES, ADD_FAVORITE, ADD_FILTER, ADD_RECIPES,\n  ADD_RECOMMENDATIONS, END_RECIPE, REQUEST_RECIPES, RM_FAVORITE,\n  START_RECIPE, ADD_BYINGREDIENT } from './index';\n\nconst addRecipes = (payload) => ({\n  type: ADD_RECIPES,\n  payload,\n});\n\nconst requestRecipes = () => ({\n  type: REQUEST_RECIPES,\n});\n\nconst addFilter = (payload) => ({\n  type: ADD_FILTER,\n  payload,\n});\n\nconst formatedObject = (obj, type) => {\n  const apiType = type === 'comidas' ? 'Meal' : 'Drink';\n  const { strArea: area = '', strCategory: category = '',\n    strAlcoholic: alcoholicOrNot = '', [`str${apiType}`]: name,\n    [`str${apiType}Thumb`]: image, strTags } = obj;\n  const tags = !strTags ? [] : strTags.split(',');\n  const idApi = `id${apiType}`;\n  const id = obj[idApi];\n  const searchObject = {\n    id, area, category, alcoholicOrNot, name, image, type, tags };\n  // if (key === 'i') {\n  //   const IngredientKeys = Object.keys(obj)\n  //     .filter((ingKey) => (\n  //       ingKey\n  //         .startsWith('strIngredient')\n  //     && obj[ingKey] !== '' && obj[ingKey] !== null));\n  //   const measureKeys = IngredientKeys\n  //     .map((_, index) => obj[`strMeasure${index + 1}`]);\n  //   const ingredients = IngredientKeys\n  //     .reduce((acc, curr) => ({ ...acc, [curr]: obj[curr] }), {});\n  //   const measures = measureKeys\n  //     .reduce((acc, curr) => ({ ...acc, [curr]: obj[curr] }), {});\n  //   return { ...searchObject, ...ingredients, ...measures };\n  // }\n  return { ...obj, ...searchObject };\n};\n\nexport const fetchRecipes = (token, type = 'comidas',\n  { request = 'search', key = 's', parameter = '' } = {}) => (\n  async (dispatch) => {\n    const filter = request === 'filter' ? parameter : '';\n    dispatch(addFilter(filter));\n    dispatch(requestRecipes());\n    const typeApi = type === 'comidas' ? 'meals' : 'drinks';\n    const domains = { comidas: 'themealdb', bebidas: 'thecocktaildb' };\n    let url = `https://www.${domains[type]}.com/api/json/v1/${token}/${request}.php?${key}=${parameter}`;\n    if (!key) url = `https://www.${domains[type]}.com/api/json/v1/${token}/${request}.php`;\n    const data = await fetch(url);\n    const { [typeApi]: recipes } = await data.json();\n    dispatch(addRecipes(recipes.map((recipe) => formatedObject(recipe, type))));\n  }\n);\n\n// if (url === 'https://www.themealdb.com/api/json/v1/1/list.php?i=list')\n// return Promise.resolve(mealIngredients);\n\n// if (url === 'https://www.themealdb.com/api/json/v1/1/filter.php?i=Chicken')\n// return Promise.resolve(mealsByIngredient);\n\n// if (url === 'https://www.thecocktaildb.com/api/json/v1/1/list.php?i=list')\n// return Promise.resolve(drinkIngredients);\n\n// if (url === 'https://www.thecocktaildb.com/api/json/v1/1/filter.php?i=Light rum')\n// return Promise.resolve(drinksByIngredient);\n\nconst addCategories = (payload) => ({\n  type: ADD_CATEGORIES,\n  payload,\n});\n\nexport const fetchCategories = (token, type = 'comidas') => (\n  async (dispatch) => {\n    const urlOpt = { comidas: `https://www.themealdb.com/api/json/v1/${token}/list.php?c=list`,\n      bebidas: `https://www.thecocktaildb.com/api/json/v1/${token}/list.php?c=list` };\n    const data = await fetch(urlOpt[type]);\n    const typeApi = type === 'comidas' ? 'meals' : 'drinks';\n    const { [typeApi]: categories } = await data.json();\n    const CATEGORIES_NUMBER = 5;\n    const categoriesArray = categories.slice(0, CATEGORIES_NUMBER)\n      .map(({ strCategory }) => strCategory);\n    dispatch(addCategories(categoriesArray));\n  }\n);\n\nconst addRecommendations = (payload) => ({\n  type: ADD_RECOMMENDATIONS,\n  payload,\n});\n\nexport const fetchRecommendations = (token, type = 'comidas') => (\n  async (dispatch) => {\n    const domains = { comidas: 'themealdb', bebidas: 'thecocktaildb' };\n    const url = `https://www.${domains[type]}.com/api/json/v1/${token}/search.php?s=`;\n    const data = await fetch(url);\n    const typeApi = type === 'comidas' ? 'meals' : 'drinks';\n    const { [typeApi]: recipes } = await data.json();\n    dispatch(addRecommendations(recipes.map((recipe) => formatedObject(recipe, type))));\n  }\n);\n\nexport const startRecipe = (selectedType, payload) => ({\n  selectedType,\n  type: START_RECIPE,\n  payload,\n});\n\nexport const endRecipe = (payload) => ({\n  type: END_RECIPE,\n  payload,\n});\n\nexport const addFavorite = (payload) => ({\n  type: ADD_FAVORITE,\n  payload,\n});\n\nexport const removeFavorite = (payload) => ({\n  type: RM_FAVORITE,\n  payload,\n});\n\nexport const byAddIngredient = (payload) => ({\n  type: ADD_BYINGREDIENT,\n  payload,\n});\n"]},"metadata":{},"sourceType":"module"}