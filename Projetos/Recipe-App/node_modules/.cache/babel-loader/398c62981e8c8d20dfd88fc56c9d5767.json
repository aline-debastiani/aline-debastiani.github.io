{"ast":null,"code":"var _jsxFileName = \"/home/alinedebastiani/sd-08-project-recipes-app/src/pages/Main.jsx\";\nimport React, { useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { useHistory } from 'react-router';\nimport RecipeCard from '../components/RecipeCard';\nimport Loading from '../components/Loading';\nimport CategoryButton from '../components/CategoryButton';\nimport Header from '../components/Header';\nimport Footer from '../components/Footer';\nimport { byAddIngredient, fetchCategories, fetchRecipes } from '../actions/recipes';\n\nfunction Main({\n  location: {\n    pathname\n  }\n}) {\n  const {\n    list,\n    isFetching,\n    categories,\n    byIngredient,\n    filter\n  } = useSelector(state => state.recipes);\n  const dispatch = useDispatch();\n  const history = useHistory();\n  const type = pathname.slice(1);\n  const {\n    mealsToken,\n    cocktailsToken\n  } = useSelector(state => state.login);\n\n  const renderRecipes = () => {\n    if (list.length === 0) {\n      alert('Sinto muito, não encontramos nenhuma receita para esses filtros.');\n      return;\n    }\n\n    if (list.length === 1 && filter === '') {\n      history.push(`${pathname}/${list[0].id}`);\n      return;\n    }\n\n    return list.map((recipe, index) => /*#__PURE__*/React.createElement(RecipeCard, {\n      type: type,\n      index: index,\n      recipe: recipe,\n      key: `recipe-${index}`,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 32,\n        columnNumber: 7\n      }\n    }));\n  };\n\n  useEffect(() => {\n    const reqType = {\n      request: 'filter',\n      key: 'i',\n      parameter: byIngredient\n    };\n    const token = pathname === 'comidas' ? mealsToken : cocktailsToken;\n    dispatch(fetchCategories(token, type));\n\n    if (byIngredient) {\n      dispatch(fetchRecipes(token, type, reqType));\n      dispatch(byAddIngredient(''));\n    } else {\n      dispatch(fetchRecipes(token, type));\n    }\n  }, [pathname]);\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Header, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 7\n    }\n  }), categories.map(category => /*#__PURE__*/React.createElement(CategoryButton, {\n    name: category,\n    key: `btn-${category}`,\n    type: type,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 11\n    }\n  })), /*#__PURE__*/React.createElement(CategoryButton, {\n    name: \"All\",\n    type: type,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 7\n    }\n  }), isFetching ? /*#__PURE__*/React.createElement(Loading, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 22\n    }\n  }) : renderRecipes(), /*#__PURE__*/React.createElement(Footer, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 7\n    }\n  }));\n}\n\nMain.propTypes = {\n  location: PropTypes.shape({\n    pathname: PropTypes.string.isRequired\n  }).isRequired\n};\nexport default Main;","map":{"version":3,"sources":["/home/alinedebastiani/sd-08-project-recipes-app/src/pages/Main.jsx"],"names":["React","useEffect","PropTypes","useDispatch","useSelector","useHistory","RecipeCard","Loading","CategoryButton","Header","Footer","byAddIngredient","fetchCategories","fetchRecipes","Main","location","pathname","list","isFetching","categories","byIngredient","filter","state","recipes","dispatch","history","type","slice","mealsToken","cocktailsToken","login","renderRecipes","length","alert","push","id","map","recipe","index","reqType","request","key","parameter","token","category","propTypes","shape","string","isRequired"],"mappings":"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","sourcesContent":["import React, { useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport { useDispatch, useSelector } from 'react-redux';\n\nimport { useHistory } from 'react-router';\nimport RecipeCard from '../components/RecipeCard';\nimport Loading from '../components/Loading';\nimport CategoryButton from '../components/CategoryButton';\nimport Header from '../components/Header';\nimport Footer from '../components/Footer';\nimport { byAddIngredient, fetchCategories, fetchRecipes } from '../actions/recipes';\n\nfunction Main({ location: { pathname } }) {\n  const {\n    list, isFetching, categories, byIngredient, filter,\n  } = useSelector((state) => state.recipes);\n  const dispatch = useDispatch();\n  const history = useHistory();\n  const type = pathname.slice(1);\n  const { mealsToken, cocktailsToken } = useSelector((state) => state.login);\n\n  const renderRecipes = () => {\n    if (list.length === 0) {\n      alert('Sinto muito, não encontramos nenhuma receita para esses filtros.');\n      return;\n    }\n    if (list.length === 1 && filter === '') {\n      history.push(`${pathname}/${list[0].id}`);\n      return;\n    }\n    return list.map((recipe, index) => (\n      <RecipeCard\n        type={ type }\n        index={ index }\n        recipe={ recipe }\n        key={ `recipe-${index}` }\n      />));\n  };\n\n  useEffect(() => {\n    const reqType = { request: 'filter', key: 'i', parameter: byIngredient };\n    const token = pathname === 'comidas' ? mealsToken : cocktailsToken;\n    dispatch(fetchCategories(token, type));\n    if (byIngredient) {\n      dispatch(fetchRecipes(token, type, reqType));\n      dispatch(byAddIngredient(''));\n    } else {\n      dispatch(fetchRecipes(token, type));\n    }\n  }, [pathname]);\n\n  return (\n    <>\n      <Header />\n      { categories\n        .map((category) => (\n          <CategoryButton name={ category } key={ `btn-${category}` } type={ type } />))}\n      <CategoryButton name=\"All\" type={ type } />\n      { isFetching ? <Loading /> : renderRecipes() }\n      <Footer />\n    </>\n  );\n}\n\nMain.propTypes = {\n  location: PropTypes.shape({\n    pathname: PropTypes.string.isRequired,\n  }).isRequired,\n};\n\nexport default Main;\n"]},"metadata":{},"sourceType":"module"}