{"ast":null,"code":"var _jsxFileName = \"/home/alinedebastiani/sd-08-project-recipes-app/src/pages/ExploreIngredients.js\";\nimport React, { useEffect, useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { Redirect } from 'react-router-dom';\nimport Loading from '../components/Loading';\nimport { byAddIngredient, fetchRecipes } from '../actions/recipes';\nimport Header from '../components/Header';\n\nfunction ExploreIngredients({\n  location: {\n    pathname\n  }\n}) {\n  const select = pathname.split('/')[2];\n  const selectType = {\n    comidas: 'meals',\n    bebidas: 'drinks'\n  };\n  const type = selectType[select];\n  const {\n    list,\n    isFetching\n  } = useSelector(state => state.recipes);\n  const dispatch = useDispatch();\n  const [shouldRedirect, setShouldRedirect] = useState(false);\n  useEffect(() => {\n    // ver esse codigo dnv\n    dispatch(fetchRecipes(type, {\n      request: 'list',\n      key: 'i',\n      parameter: 'list'\n    }));\n  }, []);\n\n  const handleClick = ingredient => {\n    setShouldRedirect(true);\n    dispatch(byAddIngredient(ingredient));\n  };\n\n  if (isFetching) return /*#__PURE__*/React.createElement(Loading, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 27\n    }\n  });\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Header, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(\"h1\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 7\n    }\n  }, \"Explorar\"), type === 'meals' ? list.map(({\n    idIngredient,\n    strIngredient\n  }, index) => {\n    const url = `https://www.themealdb.com/images/ingredients/${strIngredient}-Small.png`;\n    return /*#__PURE__*/React.createElement(\"button\", {\n      \"data-testid\": `${index}-ingredient-card`,\n      key: idIngredient,\n      onClick: () => handleClick(strIngredient),\n      type: \"button\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"img\", {\n      alt: `ingredient ${idIngredient}`,\n      \"data-testid\": `${index}-card-img`,\n      src: url,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 15\n      }\n    }), /*#__PURE__*/React.createElement(\"p\", {\n      \"data-testid\": `${index}-card-name`,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 15\n      }\n    }, strIngredient));\n  }) : list.map(({\n    strIngredient1\n  }, index) => {\n    const url = `https://www.thecocktaildb.com/images/ingredients/${strIngredient1}-Small.png`;\n    return /*#__PURE__*/React.createElement(\"button\", {\n      \"data-testid\": `${index}-ingredient-card`,\n      key: strIngredient1,\n      onClick: () => handleClick(strIngredient1),\n      type: \"button\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"img\", {\n      alt: `ingredient ${strIngredient1}`,\n      \"data-testid\": `${index}-card-img`,\n      src: url,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 15\n      }\n    }), /*#__PURE__*/React.createElement(\"p\", {\n      \"data-testid\": `${index}-card-name`,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 15\n      }\n    }, strIngredient1));\n  }), shouldRedirect && /*#__PURE__*/React.createElement(Redirect, {\n    to: `../../${select}`,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 27\n    }\n  }));\n}\n\nExploreIngredients.propTypes = {\n  location: PropTypes.shape({\n    pathname: PropTypes.string.isRequired\n  }).isRequired\n};\nexport default ExploreIngredients;","map":{"version":3,"sources":["/home/alinedebastiani/sd-08-project-recipes-app/src/pages/ExploreIngredients.js"],"names":["React","useEffect","useState","PropTypes","useDispatch","useSelector","Redirect","Loading","byAddIngredient","fetchRecipes","Header","ExploreIngredients","location","pathname","select","split","selectType","comidas","bebidas","type","list","isFetching","state","recipes","dispatch","shouldRedirect","setShouldRedirect","request","key","parameter","handleClick","ingredient","map","idIngredient","strIngredient","index","url","strIngredient1","propTypes","shape","string","isRequired"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { Redirect } from 'react-router-dom';\nimport Loading from '../components/Loading';\nimport { byAddIngredient, fetchRecipes } from '../actions/recipes';\nimport Header from '../components/Header';\n\nfunction ExploreIngredients({ location: { pathname } }) {\n  const select = pathname.split('/')[2];\n  const selectType = { comidas: 'meals', bebidas: 'drinks' };\n  const type = selectType[select];\n\n  const { list, isFetching } = useSelector((state) => state.recipes);\n  const dispatch = useDispatch();\n\n  const [shouldRedirect, setShouldRedirect] = useState(false);\n\n  useEffect(() => {\n    // ver esse codigo dnv\n    dispatch(fetchRecipes(type, { request: 'list', key: 'i', parameter: 'list' }));\n  }, []);\n\n  const handleClick = (ingredient) => {\n    setShouldRedirect(true);\n    dispatch(byAddIngredient(ingredient));\n  };\n\n  if (isFetching) return (<Loading />);\n  return (\n    <>\n      <Header />\n      <h1>Explorar</h1>\n      { type === 'meals'\n        ? list.map(({ idIngredient, strIngredient }, index) => {\n          const url = `https://www.themealdb.com/images/ingredients/${strIngredient}-Small.png`;\n          return (\n            <button\n              data-testid={ `${index}-ingredient-card` }\n              key={ idIngredient }\n              onClick={ () => handleClick(strIngredient) }\n              type=\"button\"\n            >\n              <img\n                alt={ `ingredient ${idIngredient}` }\n                data-testid={ `${index}-card-img` }\n                src={ url }\n              />\n              <p data-testid={ `${index}-card-name` }>{ strIngredient }</p>\n            </button>\n          );\n        })\n        : list.map(({ strIngredient1 }, index) => {\n          const url = `https://www.thecocktaildb.com/images/ingredients/${strIngredient1}-Small.png`;\n          return (\n            <button\n              data-testid={ `${index}-ingredient-card` }\n              key={ strIngredient1 }\n              onClick={ () => handleClick(strIngredient1) }\n              type=\"button\"\n            >\n              <img\n                alt={ `ingredient ${strIngredient1}` }\n                data-testid={ `${index}-card-img` }\n                src={ url }\n              />\n              <p data-testid={ `${index}-card-name` }>{ strIngredient1 }</p>\n            </button>\n          );\n        }) }\n      { shouldRedirect && <Redirect to={ `../../${select}` } /> }\n    </>\n  );\n}\n\nExploreIngredients.propTypes = {\n  location: PropTypes.shape({\n    pathname: PropTypes.string.isRequired,\n  }).isRequired,\n};\n\nexport default ExploreIngredients;\n"]},"metadata":{},"sourceType":"module"}