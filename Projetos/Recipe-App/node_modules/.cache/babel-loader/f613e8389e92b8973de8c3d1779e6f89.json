{"ast":null,"code":"var _jsxFileName = \"/home/alinedebastiani/sd-08-project-recipes-app/src/pages/ExploreIngredients.js\";\nimport React, { useEffect, useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { Redirect } from 'react-router-dom';\nimport { Card } from 'react-bootstrap';\nimport Loading from '../components/Loading';\nimport Footer from '../components/Footer';\nimport Header from '../components/Header';\nimport { byAddIngredient, fetchRecipes } from '../actions/recipes';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './Explore.css';\n\nfunction ExploreIngredients({\n  location: {\n    pathname\n  }\n}) {\n  const type = pathname.split('/')[2];\n  const {\n    mealsToken,\n    cocktailsToken\n  } = useSelector(state => state.login);\n  const {\n    list = [],\n    isFetching\n  } = useSelector(state => state.recipes);\n  const dispatch = useDispatch();\n  const [shouldRedirect, setShouldRedirect] = useState(false);\n  useEffect(() => {\n    const reqType = {\n      request: 'list',\n      key: 'i',\n      parameter: 'list'\n    };\n    const token = type === 'comidas' ? mealsToken : cocktailsToken;\n    dispatch(fetchRecipes(token, type, reqType));\n  }, []);\n\n  const handleClick = ingredient => {\n    setShouldRedirect(true);\n    dispatch(byAddIngredient(ingredient));\n  };\n\n  if (isFetching) return /*#__PURE__*/React.createElement(Loading, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 27\n    }\n  });\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Header, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(\"section\", {\n    className: \"cards-container\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 7\n    }\n  }, type === 'comidas' ? list.map(({\n    idIngredient,\n    strIngredient\n  }, index) => {\n    const url = `https://www.themealdb.com/images/ingredients/${strIngredient}-Small.png`;\n    return /*#__PURE__*/React.createElement(Card, {\n      border: \"dark\",\n      className: \"card-explore\",\n      key: idIngredient,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 15\n      }\n    }, /*#__PURE__*/React.createElement(\"button\", {\n      \"data-testid\": `${index}-ingredient-card`,\n      onClick: () => handleClick(strIngredient),\n      type: \"button\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(Card.Img, {\n      alt: `ingredient ${idIngredient}`,\n      className: \"ingredients-img\",\n      \"data-testid\": `${index}-card-img`,\n      src: url,\n      variant: \"top\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 19\n      }\n    }), /*#__PURE__*/React.createElement(Card.Body, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 19\n      }\n    }, /*#__PURE__*/React.createElement(Card.Title, {\n      \"data-testid\": `${index}-card-name`,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 21\n      }\n    }, strIngredient))));\n  }) : list.map(({\n    strIngredient1\n  }, index) => {\n    const url = `https://www.thecocktaildb.com/images/ingredients/${strIngredient1}-Small.png`;\n    return /*#__PURE__*/React.createElement(Card, {\n      border: \"dark\",\n      className: \"card-explore\",\n      key: strIngredient1,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 15\n      }\n    }, /*#__PURE__*/React.createElement(\"button\", {\n      \"data-testid\": `${index}-ingredient-card`,\n      onClick: () => handleClick(strIngredient1),\n      type: \"button\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(Card.Img, {\n      alt: `ingredient ${strIngredient1}`,\n      className: \"ingredients-img\",\n      \"data-testid\": `${index}-card-img`,\n      src: url,\n      variant: \"top\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 19\n      }\n    }), /*#__PURE__*/React.createElement(Card.Body, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 19\n      }\n    }, /*#__PURE__*/React.createElement(Card.Title, {\n      \"data-testid\": `${index}-card-name`,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 21\n      }\n    }, strIngredient1))));\n  })), shouldRedirect && /*#__PURE__*/React.createElement(Redirect, {\n    to: `/${type}`,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 27\n    }\n  }), /*#__PURE__*/React.createElement(Footer, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 7\n    }\n  }));\n}\n\nExploreIngredients.propTypes = {\n  location: PropTypes.shape({\n    pathname: PropTypes.string.isRequired\n  }).isRequired\n};\nexport default ExploreIngredients;","map":{"version":3,"sources":["/home/alinedebastiani/sd-08-project-recipes-app/src/pages/ExploreIngredients.js"],"names":["React","useEffect","useState","PropTypes","useDispatch","useSelector","Redirect","Card","Loading","Footer","Header","byAddIngredient","fetchRecipes","ExploreIngredients","location","pathname","type","split","mealsToken","cocktailsToken","state","login","list","isFetching","recipes","dispatch","shouldRedirect","setShouldRedirect","reqType","request","key","parameter","token","handleClick","ingredient","map","idIngredient","strIngredient","index","url","strIngredient1","propTypes","shape","string","isRequired"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { Redirect } from 'react-router-dom';\nimport { Card } from 'react-bootstrap';\nimport Loading from '../components/Loading';\nimport Footer from '../components/Footer';\nimport Header from '../components/Header';\nimport { byAddIngredient, fetchRecipes } from '../actions/recipes';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './Explore.css';\n\nfunction ExploreIngredients({ location: { pathname } }) {\n  const type = pathname.split('/')[2];\n  const { mealsToken, cocktailsToken } = useSelector((state) => state.login);\n  const { list = [], isFetching } = useSelector((state) => state.recipes);\n  const dispatch = useDispatch();\n  const [shouldRedirect, setShouldRedirect] = useState(false);\n\n  useEffect(() => {\n    const reqType = { request: 'list', key: 'i', parameter: 'list' };\n    const token = type === 'comidas' ? mealsToken : cocktailsToken;\n    dispatch(fetchRecipes(token, type, reqType));\n  }, []);\n\n  const handleClick = (ingredient) => {\n    setShouldRedirect(true);\n    dispatch(byAddIngredient(ingredient));\n  };\n\n  if (isFetching) return (<Loading />);\n  return (\n    <>\n      <Header />\n      <section className=\"cards-container\">\n        { type === 'comidas'\n          ? list.map(({ idIngredient, strIngredient }, index) => {\n            const url = `https://www.themealdb.com/images/ingredients/${strIngredient}-Small.png`;\n            return (\n              <Card\n                border=\"dark\"\n                className=\"card-explore\"\n                key={ idIngredient }\n              >\n                <button\n                  data-testid={ `${index}-ingredient-card` }\n                  onClick={ () => handleClick(strIngredient) }\n                  type=\"button\"\n                >\n                  <Card.Img\n                    alt={ `ingredient ${idIngredient}` }\n                    className=\"ingredients-img\"\n                    data-testid={ `${index}-card-img` }\n                    src={ url }\n                    variant=\"top\"\n                  />\n                  <Card.Body>\n                    <Card.Title\n                      data-testid={ `${index}-card-name` }\n                    >\n                      { strIngredient }\n                    </Card.Title>\n                  </Card.Body>\n                </button>\n              </Card>\n            );\n          })\n          : list.map(({ strIngredient1 }, index) => {\n            const url = `https://www.thecocktaildb.com/images/ingredients/${strIngredient1}-Small.png`;\n            return (\n              <Card\n                border=\"dark\"\n                className=\"card-explore\"\n                key={ strIngredient1 }\n              >\n                <button\n                  data-testid={ `${index}-ingredient-card` }\n                  onClick={ () => handleClick(strIngredient1) }\n                  type=\"button\"\n                >\n                  <Card.Img\n                    alt={ `ingredient ${strIngredient1}` }\n                    className=\"ingredients-img\"\n                    data-testid={ `${index}-card-img` }\n                    src={ url }\n                    variant=\"top\"\n                  />\n                  <Card.Body>\n                    <Card.Title\n                      data-testid={ `${index}-card-name` }\n                    >\n                      { strIngredient1 }\n                    </Card.Title>\n                  </Card.Body>\n                </button>\n              </Card>\n            );\n          }) }\n      </section>\n      { shouldRedirect && <Redirect to={ `/${type}` } /> }\n      <Footer />\n    </>\n  );\n}\n\nExploreIngredients.propTypes = {\n  location: PropTypes.shape({\n    pathname: PropTypes.string.isRequired,\n  }).isRequired,\n};\n\nexport default ExploreIngredients;\n"]},"metadata":{},"sourceType":"module"}