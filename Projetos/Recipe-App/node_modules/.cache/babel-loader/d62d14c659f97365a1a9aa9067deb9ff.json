{"ast":null,"code":"var _jsxFileName = \"/home/alinedebastiani/sd-08-project-recipes-app/src/components/CategoryButton.jsx\";\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { useLocation } from 'react-router';\nimport { fetchRecipes } from '../actions/recipes';\n\nfunction CategoryButton({\n  name,\n  type\n}) {\n  const selectedFilter = useSelector(state => state.recipes.filter);\n  const dispatch = useDispatch();\n  const {\n    pathname\n  } = useLocation();\n  const {\n    mealsToken,\n    cocktailsToken\n  } = useSelector(state => state.login);\n\n  const click = category => {\n    const reqType = {\n      request: 'filter',\n      key: 'c',\n      parameter: category\n    };\n    const token = pathname === 'comidas' ? mealsToken : cocktailsToken;\n\n    if (selectedFilter === category || category === 'All') {\n      dispatch(fetchRecipes(token, type));\n    } else dispatch(fetchRecipes(token, type, reqType));\n  };\n\n  return /*#__PURE__*/React.createElement(\"button\", {\n    type: \"button\",\n    onClick: () => click(name),\n    \"data-testid\": `${name}-category-filter`,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 24,\n      columnNumber: 5\n    }\n  }, name);\n}\n\nCategoryButton.propTypes = {\n  name: PropTypes.string.isRequired,\n  type: PropTypes.string.isRequired\n};\nexport default CategoryButton;","map":{"version":3,"sources":["/home/alinedebastiani/sd-08-project-recipes-app/src/components/CategoryButton.jsx"],"names":["React","PropTypes","useDispatch","useSelector","useLocation","fetchRecipes","CategoryButton","name","type","selectedFilter","state","recipes","filter","dispatch","pathname","mealsToken","cocktailsToken","login","click","category","reqType","request","key","parameter","token","propTypes","string","isRequired"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,SAASC,WAAT,EAAsBC,WAAtB,QAAyC,aAAzC;AAEA,SAASC,WAAT,QAA4B,cAA5B;AACA,SAASC,YAAT,QAA6B,oBAA7B;;AAEA,SAASC,cAAT,CAAwB;AAAEC,EAAAA,IAAF;AAAQC,EAAAA;AAAR,CAAxB,EAAwC;AACtC,QAAMC,cAAc,GAAGN,WAAW,CAAEO,KAAD,IAAWA,KAAK,CAACC,OAAN,CAAcC,MAA1B,CAAlC;AACA,QAAMC,QAAQ,GAAGX,WAAW,EAA5B;AACA,QAAM;AAAEY,IAAAA;AAAF,MAAeV,WAAW,EAAhC;AAEA,QAAM;AAAEW,IAAAA,UAAF;AAAcC,IAAAA;AAAd,MAAiCb,WAAW,CAAEO,KAAD,IAAWA,KAAK,CAACO,KAAlB,CAAlD;;AAEA,QAAMC,KAAK,GAAIC,QAAD,IAAc;AAC1B,UAAMC,OAAO,GAAG;AAAEC,MAAAA,OAAO,EAAE,QAAX;AAAqBC,MAAAA,GAAG,EAAE,GAA1B;AAA+BC,MAAAA,SAAS,EAAEJ;AAA1C,KAAhB;AACA,UAAMK,KAAK,GAAGV,QAAQ,KAAK,SAAb,GAAyBC,UAAzB,GAAsCC,cAApD;;AACA,QAAIP,cAAc,KAAKU,QAAnB,IAA+BA,QAAQ,KAAK,KAAhD,EAAuD;AACrDN,MAAAA,QAAQ,CAACR,YAAY,CAACmB,KAAD,EAAQhB,IAAR,CAAb,CAAR;AACD,KAFD,MAEOK,QAAQ,CAACR,YAAY,CAACmB,KAAD,EAAQhB,IAAR,EAAcY,OAAd,CAAb,CAAR;AACR,GAND;;AAQA,sBACE;AACE,IAAA,IAAI,EAAC,QADP;AAEE,IAAA,OAAO,EAAG,MAAMF,KAAK,CAACX,IAAD,CAFvB;AAGE,mBAAe,GAAEA,IAAK,kBAHxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAKGA,IALH,CADF;AASD;;AAEDD,cAAc,CAACmB,SAAf,GAA2B;AACzBlB,EAAAA,IAAI,EAAEN,SAAS,CAACyB,MAAV,CAAiBC,UADE;AAEzBnB,EAAAA,IAAI,EAAEP,SAAS,CAACyB,MAAV,CAAiBC;AAFE,CAA3B;AAKA,eAAerB,cAAf","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport { useDispatch, useSelector } from 'react-redux';\n\nimport { useLocation } from 'react-router';\nimport { fetchRecipes } from '../actions/recipes';\n\nfunction CategoryButton({ name, type }) {\n  const selectedFilter = useSelector((state) => state.recipes.filter);\n  const dispatch = useDispatch();\n  const { pathname } = useLocation();\n\n  const { mealsToken, cocktailsToken } = useSelector((state) => state.login);\n\n  const click = (category) => {\n    const reqType = { request: 'filter', key: 'c', parameter: category };\n    const token = pathname === 'comidas' ? mealsToken : cocktailsToken;\n    if (selectedFilter === category || category === 'All') {\n      dispatch(fetchRecipes(token, type));\n    } else dispatch(fetchRecipes(token, type, reqType));\n  };\n\n  return (\n    <button\n      type=\"button\"\n      onClick={ () => click(name) }\n      data-testid={ `${name}-category-filter` }\n    >\n      {name}\n    </button>\n  );\n}\n\nCategoryButton.propTypes = {\n  name: PropTypes.string.isRequired,\n  type: PropTypes.string.isRequired,\n};\n\nexport default CategoryButton;\n"]},"metadata":{},"sourceType":"module"}